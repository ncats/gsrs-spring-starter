package gsrs.controller;

import gsrs.service.ExportService;
import ix.ginas.exporters.ExportDir;
import ix.ginas.exporters.ExportMetaData;
import lombok.Builder;
import lombok.Data;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.io.ByteArrayResource;
import org.springframework.hateoas.server.ExposesResourceFor;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.security.Principal;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Optional;
//import java.util.regex.Pattern;
import java.util.stream.Collectors;
import jakarta.validation.ConstraintViolationException;
import jakarta.validation.constraints.Pattern;

/**
 * Controller for managing and downloading export results
 * generated by {@link ExportService}.
 */
@Validated
@ExposesResourceFor(ExportMetaData.class)
@GsrsRestApiController(context = "profile/downloads")
public class ExportController {

    @Autowired
    private ExportService exportService;

    @Autowired
    private GsrsControllerConfiguration gsrsControllerConfiguration;

//    private final static Pattern ALPHANUMERIC = Pattern.compile("^[a-zA-Z0-9-]*$");

    /**
     * Get a listing of all the downloads by this user.
     * @param principal
     * @return
     */
    @PreAuthorize("isAuthenticated()")
    @GetGsrsRestApiMapping("")
    public ResponseEntity<Object> myDownloads(Principal principal,
                                              @RequestParam(value ="rows", defaultValue = "16") int rows,
                                              @RequestParam(value ="page", defaultValue = "1") int page,
                                              @RequestParam Map<String, String> parameters){
        List<ExportMetaData> dataList = getPagedDownloads(
                exportService.getExplicitExportMetaData(principal.getName()),
                rows, page);

        return new ResponseEntity<>(
                DownloadResultPage.builder()
                        .page(page).row(rows)
                        .downloads(dataList.stream().map(e-> GsrsControllerUtil.enhanceWithView(e, parameters)).collect(Collectors.toList()))
                        .build(),
                HttpStatus.OK);

    }

    private static List<ExportMetaData> getPagedDownloads(List<ExportMetaData> result, int rows,
                                                          int page) {

        List<ExportMetaData> jobs = new ArrayList<ExportMetaData>();

        if (result.size() > 0) {
            rows = Math.min(result.size(), Math.max(1, rows));
            for (int i = (page - 1) * rows, j = 0; j < rows
                    && i < result.size(); ++j, ++i) {
                jobs.add(result.get(i));
            }
        }

        return jobs;

    }
    @Data
    @Builder
    public static class DownloadResultPage{
        public List<Object> downloads;
        public int page;
        public int row;

    }
    /**
     * Get the current status of a particular export.
     * @param id the export id.
     * @param principal the logged in user.
     * @param parameters any additional parameters on the url.
     * @return
     */
    @PreAuthorize("isAuthenticated()")
    @GetGsrsRestApiMapping(value = {"/{id}", "({id})"})
    public ResponseEntity<Object> getStatusOf(@PathVariable("id") @Pattern(regexp="^[a-fA-F0-9-]{36}$") String id, Principal principal, @RequestParam Map<String, String> parameters){
        Optional<ExportMetaData> opt = exportService.getStatusFor(principal.getName(), id);
        if(!opt.isPresent()){
            return GsrsControllerConfiguration.createResponseEntity("could not find etag with Id " + id, HttpStatus.BAD_REQUEST.value());
        }


        return new ResponseEntity<>(GsrsControllerUtil.enhanceWithView(opt.get(), parameters), HttpStatus.OK);
    }

    /**
     * Cancel the given export process if it's still running.
     * @param id the export id.
     * @param principal the logged in user.
     * @param parameters any additional parameters on the url.
     * @return
     */
    @PreAuthorize("isAuthenticated()")
    @GetGsrsRestApiMapping(value = {"/{id}/@cancel", "({id})/@cancel"})
    public ResponseEntity<Object> cancel(@PathVariable("id") @Pattern(regexp="^[a-fA-F0-9-]{36}$") String id, Principal principal, @RequestParam Map<String, String> parameters){
        Optional<ExportMetaData> opt = exportService.getStatusFor(principal.getName(), id);
        if(!opt.isPresent()){
            return GsrsControllerConfiguration.createResponseEntity("could not find etag with Id " + id, HttpStatus.BAD_REQUEST.value());
        }
        if(opt.get().isComplete()){
            return GsrsControllerConfiguration.createResponseEntity("Can not cancel a completed export " + id, HttpStatus.BAD_REQUEST.value());
        }
        opt.get().cancel();
        //match GSRS 2.x response of OK
        return new ResponseEntity<>(GsrsControllerUtil.enhanceWithViewFull(opt.get()), HttpStatus.OK);
    }

    /**
     * Delete the given exported file.
     * @param id the export id.
     * @param principal the logged in user.
     * @param parameters any additional parameters on the url.
     * @return
     */
    @PreAuthorize("isAuthenticated()")
    @DeleteGsrsRestApiMapping(value = {"/{id}", "({id})"})
    public ResponseEntity<Object> delete(@PathVariable("id") @Pattern(regexp="^[a-fA-F0-9-]{36}$") String id, Principal principal, @RequestParam Map<String, String> parameters){
        Optional<ExportMetaData> opt = exportService.getStatusFor(principal.getName(), id);
        if(!opt.isPresent()){
            return GsrsControllerConfiguration.createResponseEntity("could not find exported data with Id " + id, HttpStatus.BAD_REQUEST.value());
        }
        exportService.remove(opt.get());

        //match GSRS 2.x NO CONTEXT  and include json message
        return GsrsControllerConfiguration.createResponseEntity("download deleted", HttpStatus.NO_CONTENT.value());
    }

    /**
     * Download the given exported file.
     * @param id the export id.
     * @param principal the logged in user.
     * @param parameters any additional parameters on the url.
     * @return
     */
    @PreAuthorize("isAuthenticated()")
    @GetGsrsRestApiMapping(value = {"/{id}/download", "({id})/download"})
    public ResponseEntity<Object> download(@PathVariable("id") @Pattern(regexp="^[a-fA-F0-9-]{36}$") String id, Principal principal, @RequestParam Map<String, String> parameters) throws IOException {
        Optional<ExportMetaData> opt = exportService.getStatusFor(principal.getName(), id);
        if(!opt.isPresent()){
            return GsrsControllerConfiguration.createResponseEntity("could not find exported data with Id " + id, HttpStatus.BAD_REQUEST.value());
        }

        Optional<ExportDir.ExportFile<ExportMetaData>> exportFile = exportService.getFile(principal.getName(), opt.get().getFilename());
        if(!opt.get().isComplete()){
           //should we not return unless complete?
            return GsrsControllerConfiguration.createResponseEntity("export not completed " + id, HttpStatus.BAD_REQUEST.value());
        }
        if(!exportFile.isPresent()){
            return GsrsControllerConfiguration.createResponseEntity("could not find exported file from Id " + id, HttpStatus.BAD_REQUEST.value());
        }

        String filename = parameters.getOrDefault("filename", opt.get().getDisplayFilename());

        File f = exportFile.get().getFile();



        Path path = Paths.get(f.getAbsolutePath());
        ByteArrayResource resource = new ByteArrayResource(Files.readAllBytes(path));

        return ResponseEntity.ok()
                .contentLength(f.length())
                .header("Content-disposition", "attachment; filename=" + filename)
//                .contentType("application/x-download")

                .contentType(MediaType.APPLICATION_OCTET_STREAM)

                .body(resource);
    }

    @ExceptionHandler(ConstraintViolationException.class)
    public ResponseEntity handleConstraintViolationException(ConstraintViolationException ex){
        return GsrsControllerConfiguration.createResponseEntity(ex.getMessage(), HttpStatus.BAD_REQUEST.value());
    }
}
