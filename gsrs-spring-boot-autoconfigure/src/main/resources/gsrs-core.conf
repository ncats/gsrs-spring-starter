spring.jpa.properties.hibernate.entity_dirtiness_strategy=gsrs.GsrsEntityDirtinessStrategy
spring.jackson.serialization.fail-on-empty-beans=false


#this is because on my local mac the host name is weird and doesn't resolve correctly so I get timeouts
#might be a DNS issue
eureka.instance.hostname=localhost
#eureka.instance.preferIpAddress=true
#This is so we can set an enviornment variable to change the eureka server url which we will do for docker
#EUREKA_SERVER = "http://localhost:8761/eureka"

gsrs.sessions.sessionCookieName="ix.session"
# Sessions expire in 6 hours
gsrs.sessions.sessionExpirationMS=21600000

#set to true if needed for https
gsrs.sessions.sessionCookieSecure=false

# Tokens expire in 3600L*1000L*24L, 24 hours
gsrs.tokens.timeResolutionMS=86400000

#eureka.client.serviceUrl.defaultZone=${EUREKA_SERVER}

gsrs.rabbitmq.exchange = "gsrs_exchange"

gsrs.api{
#this allows GSRS Api routes to add a ?error_response=500 on the url to change the error code from 404 to 500
    errorCodeParameter="error_response",
    #uncommenting this will force all errors to have the given status code (unless also using an error_response
    #forceErrorCodeValue=500
}

# caching config
ix.cache{
      base = ${ix.home}/cache,
      # 1 day
      time = 86400,
      maxElements = 10240,
      maxElementsNotEvictable = 1000,

      #maxElements = 10
      timeToLive = 86400,
      timeToIdle = 86400,
      #use persistence file cache
      useFileDb = false,
}
ix.home=ginas.ix
ix.textindex.enabled=true
ix.fetchWorkerCount=4
# Area to store uploaded files
ix.core.files.persist.location="<DB>"
ix.core.files.persist.maxsize="30MB"
ix.core.files.persist.base=${ix.home}/payload

gsrs.cv.jsonFile="/extended-cv.json"

#logging.level.org.hibernate.SQL=DEBUG
#logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE

#spring.h2.console.enabled=true
#spring.h2.console.path=/h2-console


ix.api.registeredfunctions=[
        {
                "class":"ix.core.util.pojopointer.extensions.StringLengthRegisteredFunction"
        },
       # {
#                "class":"ix.core.util.pojopointer.extensions.InChIRegisteredFunction"
#        },
#        {
#                "class":"ix.core.util.pojopointer.extensions.InChIFullRegisteredFunction"
#        },
         {
                "class":"ix.core.util.pojopointer.extensions.StringSplitRegisteredFunction"
        },
        {
                "class":"ix.core.util.pojopointer.extensions.SelectRegisteredFunction"
        },
        {
                "class":"ix.core.util.pojopointer.extensions.StringJoinRegisteredFunction"
        }
]

ix.json.typeIdResolvers = [ "ix"]

gsrs.validators = {}

gsrs.validators.vocabularies = [{
   "validatorClass" = "ix.ginas.utils.validation.validators.CVFragmentStructureValidator",
   "newObjClass" = "ix.ginas.models.v1.ControlledVocabulary"
}]


gsrs.entityProcessors = []
# This sets whether each deep object should be fully indexed with its own fields,
# or whether only the entities annotated as RootIndexable should. This should be set to true
# and the annotation should be configured for performance reasons, however the option
# remains for backward compatibility

ix.index.rootIndexOnly = true

ix.authentication.autoregister=false


#################
#  LOOPBACK WEB REQUESTS START
#################
gsrs.loopback.hostname="localhost"
gsrs.loopback.protocol="http"
#default port
gsrs.loopback.port=8080
#this is an optional override if user sets -Dhttp.port this set the gsrs.loopback.port to that value
gsrs.loopback.port=${?http.port}
gsrs.loopback.requests=[
	{
	"isDefault" : true,
	"classname" : "gsrs.controller.hateoas.LoopbackWebRequestHelper$AuthHeaderRequestAdapter",
	"parameters" : {
                "authHeaders":["auth-token", "auth-username", "auth-password", "Cookie", "cookie"]
               		}
	}
]

#################
#  LOOPBACK WEB REQUESTS END
#################


gsrs.initializers.list=[
]
